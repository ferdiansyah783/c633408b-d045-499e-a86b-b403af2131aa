// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String             @unique
  password      String
  salt          String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
  deleted       Boolean            @default(false)
  sessions      Session[]
  profile       Profile?
  conversations UserConversation[]
  chats         Chat[]
}

model Profile {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  display_name String
  gender       String
  birthday     String
  horoscope    String
  zodiac       String
  height       Int
  weight       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  deleted      Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique @db.ObjectId
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  refreshToken String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
  deleted      Boolean  @default(false)
}

model InvalidToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  deleted   Boolean  @default(false)
}

model Conversation {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  chats     Chat[]
  users     UserConversation[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt()
  deleted   Boolean            @default(false)
}

model Chat {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  senderId       String       @db.ObjectId
  conversationId String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  deleted        Boolean      @default(false)
}

model UserConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  conversationId String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  deleted        Boolean      @default(false)
}
